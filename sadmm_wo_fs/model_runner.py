from sadmm_wo_fs.solver import NetworkLassoRunner
import networkx as nx


max_iterations = 50
experiments = [100, 150, 200, 250, 300, 350, 400]
base_paths = ["/datasets/unsw-nb15", "/datasets/bot-iot", "/datasets/n-baiot"]


def main():
    c = 0.75

    for base_path in base_paths:
        for num_nodes in experiments:
            num_features = 198 + 1

            G = build_graph(num_nodes)
            runner = NetworkLassoRunner(G)
            runner.run_network_lasso(num_features, max_iterations, base_path, c)


def build_graph(num_nodes):
    print("Building a simulated MEC topology for " + str(num_nodes) + " nodes.")

    neighbours = []
    if num_nodes == 100:
        neighbours = [[75, 53, 21, 35, 47], [96, 34, 36, 14, 30], [87, 11, 45, 51, 31], [23, 33, 72, 82, 67],
                      [93, 95, 46, 8, 86], [93, 31, 4, 51, 45], [86, 8, 9, 46, 95], [27, 56, 69, 89, 98],
                      [86, 6, 46, 95, 4], [76, 6, 86, 22, 8], [98, 89, 49, 56, 41], [87, 2, 45, 51, 31],
                      [41, 49, 10, 98, 89], [59, 16, 64, 50, 55], [30, 88, 81, 1, 96], [58, 83, 28, 97, 84],
                      [13, 59, 64, 50, 55], [20, 60, 42, 67, 36], [71, 85, 77, 19, 44], [44, 90, 73, 92, 24],
                      [60, 17, 42, 67, 36], [35, 47, 40, 53, 65], [76, 9, 38, 24, 92], [33, 3, 67, 72, 82],
                      [92, 73, 38, 90, 44], [37, 74, 68, 62, 32], [32, 62, 68, 74, 37], [56, 7, 89, 98, 10],
                      [83, 84, 43, 61, 52], [63, 79, 66, 80, 70], [14, 88, 81, 1, 96], [51, 45, 11, 87, 2],
                      [62, 26, 68, 74, 37], [23, 3, 67, 72, 82], [96, 1, 36, 14, 30], [21, 47, 40, 65, 53],
                      [34, 96, 1, 17, 20], [25, 74, 68, 62, 32], [24, 92, 73, 90, 22], [80, 66, 79, 63, 29],
                      [65, 54, 47, 35, 21], [49, 12, 10, 98, 89], [60, 20, 67, 17, 33], [84, 61, 52, 78, 28],
                      [19, 90, 73, 92, 24], [51, 31, 11, 87, 2], [95, 4, 93, 8, 86], [35, 21, 40, 65, 54],
                      [91, 70, 99, 29, 63], [10, 98, 41, 89, 56], [64, 59, 55, 81, 88], [31, 45, 11, 87, 2],
                      [61, 43, 78, 84, 94], [75, 0, 21, 35, 47], [65, 26, 40, 32, 62], [81, 50, 64, 88, 59],
                      [27, 89, 98, 10, 49], [69, 7, 27, 56, 89], [15, 83, 97, 28, 84], [64, 50, 55, 13, 81],
                      [20, 17, 42, 67, 33], [52, 43, 84, 78, 94], [32, 68, 26, 74, 37], [29, 79, 66, 80, 70],
                      [50, 59, 55, 81, 88], [40, 54, 26, 32, 62], [80, 79, 63, 29, 39], [42, 33, 60, 23, 20],
                      [62, 32, 74, 37, 25], [7, 27, 56, 89, 98], [48, 91, 29, 99, 63], [85, 18, 77, 19, 44],
                      [82, 3, 23, 33, 77], [92, 24, 38, 90, 44], [37, 25, 68, 62, 32], [0, 53, 21, 35, 47],
                      [22, 9, 6, 86, 38], [18, 71, 85, 82, 72], [94, 52, 61, 43, 0], [66, 63, 80, 29, 39],
                      [66, 79, 63, 29, 39], [88, 55, 30, 14, 50], [72, 3, 23, 33, 77], [28, 84, 43, 15, 61],
                      [43, 61, 52, 28, 83], [71, 18, 77, 19, 44], [6, 8, 46, 9, 95], [2, 11, 45, 51, 31],
                      [81, 30, 14, 55, 50], [98, 10, 49, 56, 41], [73, 92, 24, 38, 44], [48, 99, 70, 29, 63],
                      [73, 24, 38, 90, 44], [4, 95, 46, 8, 86], [78, 52, 61, 0, 75], [4, 46, 93, 8, 86],
                      [34, 1, 36, 14, 30], [58, 15, 83, 28, 84], [89, 10, 49, 56, 41], [91, 48, 70, 29, 63]]
    elif num_nodes == 150:
        neighbours = []
    elif num_nodes == 200:
        neighbours = []
    elif num_nodes == 250:
        neighbours = []
    elif num_nodes == 300:
        neighbours = []
    elif num_nodes == 350:
        neighbours = []
    elif num_nodes == 400:
        neighbours = []

    G = nx.Graph()
    for node_id in range(num_nodes):
        G.add_node(node_id)
        for neighbour_id in neighbours[node_id]:
            G.add_edge(node_id, neighbour_id, weight=1)

    return G


if __name__ == "__main__":
    main()
